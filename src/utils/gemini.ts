// Note: In production, this should be moved to environment variables
const GEMINI_API_KEY = 'AIzaSyD6U19kZKfa3TcT7Z7buGO9Uhmbj7MgcRM';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
  error?: {
    code: number;
    message: string;
    status: string;
  };
}

export async function generateResponse(prompt: string): Promise<string> {
  try {
    console.log('Sending request to Gemini API...');
    
    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.7,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 1024,
      },
    };

    console.log('Request body:', requestBody);

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);

    const data: GeminiResponse = await response.json();
    console.log('Response data:', data);

    if (!response.ok) {
      if (data.error) {
        throw new Error(`Gemini API Error (${data.error.code}): ${data.error.message}`);
      }
      throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
    }

    if (data.error) {
      throw new Error(`Gemini API Error: ${data.error.message}`);
    }
    
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('No response candidates generated by Gemini');
    }

    if (!data.candidates[0].content || !data.candidates[0].content.parts || data.candidates[0].content.parts.length === 0) {
      throw new Error('Invalid response structure from Gemini');
    }

    const responseText = data.candidates[0].content.parts[0].text;
    console.log('Generated response:', responseText);
    
    return responseText;
  } catch (error) {
    console.error('Detailed error in generateResponse:', error);
    
    if (error instanceof TypeError && error.message.includes('fetch')) {
      throw new Error('Network error: Unable to connect to Gemini API. Please check your internet connection.');
    }
    
    if (error instanceof Error) {
      throw error;
    }
    
    throw new Error('An unexpected error occurred while generating response.');
  }
}